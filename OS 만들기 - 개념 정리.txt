1. 메모리 세그먼트 or 세그먼테이션
Def) 프로그램에 정의 된 특정 영역. 원하는 크기로 잘라쓸 수 있는 공간. 전체 영역을 원하는 크기로 나누어 관리하는 방식.

0) 주의 : 초기 x86 프로세서에서 사용되는 메모리 세그먼트와 80286 이후의 메모리 세그먼트는 메모리 보호 정책 부분에서는 의미가 조금 다르다.
	a) 오늘날에 일반적으로 메모리 세그먼트는 메모리를 보호하기 위한 방식이다.
	b) 최근 메모리 관리 정책은 거의 페이징 기법으로 대체되었으나, 세그먼테이션 이라는 단어는 여전히 사용되고 있다.(Segmentation Falut가 대표적)
	c) 몇몇 운영체계는 일부 논리 레벨에서 세그멘테이션을 사용한다.
	d) Segmentation Fault의 발생 조건이나 알려주는 방식은 운영 체제에 따라서 다르지만, NULL이나 변수를 통해 메모리에 기록하려는 시도가 일반적.


1) Segment 와 Offset (리얼모드 기준)
ex) 08124h를 표현하려면 06EFh:1234h라고 작성이 된다. (h는 16진수를 의미)
  0000 0110 1110 1111 0000		Segment,	16 bits, shifted 4 bits left (or multiplied by 0x10)
+      0001 0010 0011 0100		Offset,		16 bits
-------------------------------------------------------                          	
  0000 1000 0001 0010 0100		Address,	20 bits
	a) 06EFh:1234h, 0812h:0004h, 0000h:8124h, 등 다양한 값을 가질 수도 있다.
	b) 하지만 일반적으로 Segment를 먼저 구한 뒤에 오프셋에 접근하기 때문에, 논리적으로는 거의 동일한 값이 사용될 것이다.
	c) Offset을 담당하는 Register가 16bit를 전부 사용하는지, 혹은 4bit 부분만큼만 사용하는지에 대해서는 정확하게 모르겠다.

2) Segment Register 값에 0x10을 곱해서 사용하기 때문에, Segment는 0x10(16Byte)씩 나누어진다.
	a) Segment 주소값이 1 증가하면, 실제 주소는 16Byte가 증가.

3) Global Descriptor Table(GDT)
	Def)Segment 영역에 대한 데이터를 일정한 Descriptor 형시긍로 기술하고 하나의 테이블에 모아둔 것.
	a) 리얼 모드에서 보호 모드로 전환하기 위하기 위해서는 GDT를 설정해야한다.

4) Real Mode에서의 3개 주요 세그먼트. 모두 16bit.
	a) Code Segment		실행될 기계 명령어를 포함. 보통 실행가능한 명령어는 세그먼트의 가장  처음에 위치한다. CS 레지스터는 CS의 주소를 의미.
	b) Data Segment		프로그램에서 정의 데이터, 상수, 작업 영역을 포함. DS 레지스터는 DS의 주소를 의미.
	c) Stack Segment	프로그램이 임시로 저장할 필요가 있거나, 사용자의 '피호출' 서브루텐이 사용할 데이터와 주소를 포함. SS 레지스터는 SS의 주소를 의미.
	d) Extra Segment

5) 세그먼트는 페러그래프 경계에서 시작한다. 즉, 항상 10h 단위에 존재한다. 따라서 레지스터에서는 주소값의 오른쪽 4개비트를 제거하여 저장한다.

6) x86에서 8개의 범용 레지스터는 다음과 같다:
AX (Accumulator register). 산술 연산에 사용.
CX (Counter register). 시프트/회전 연산과 루프에서 사용.
DX (Data register). 산술 연산과 I/O 명령에서 사용.
BX (Base register). 데이터의 주소를 가리키는 포인터로 사용. (세그멘티드 모드에서는 세그멘트 레지스터 DS로 존재)
SP (Stack Pointer register). 스택의 최상단을 가리키는 포인터로 사용.
BP (Stack Base Pointer register). 스택의 베이스를 가리키는 포인터로 사용.
SI (Source Index register). 스트림 명령에서 소스를 가리키는 포인터로 사용.
DI (Destination Index register). 스트림 명령에서 도착점을 가리키는 포인터로 사용.
	a) 위의 나열 순서는 다음에 더욱 자세히 다루게 될 스택 삽입 명령에서 사용되는 순서이다.
	b) 레지스터는 16비트와 32비트 모드에서 모두 접근 가능하다.
	c) 16비트 모드에서 레지스터는 위의 리스트에 있는 두 글자의 약자로 통칭된다.
	d) 32비트 모드에서는 16비트의 두 자 앞에 'E'(extended)를 붙여 표시한다. 
	e) 64비트 버전에서는 'E' 대신 'R'을 사용한다. 즉, 'EAX'의 64비트 버전은 'RAX'가 된다.




2. 리얼 모드(Real Mode, 실제 모드)

1) 80286 이후의 x86 호환 CPU 운영방식.
1-1) 현대의 거의 모든 x86 운영 체제들(FreeBSD, 리눅스, OS/2, 솔라리스, 윈도 95 이후)은 시작하자마자 CPU를 보호 모드로 전환한다.
2) 최대 1MB의 메모리 크기를 제어하기 위하여 20bit Segment Memory 주소공간을 사용한다. (당시에는 1MB도 크다고 생각했다)
2-1) 1MB의 메모리를 제어하려면.. 1048576(2^20)(=FFFFFh) Byte. 
2-2) 20bit는 2^20개의 경우의 수를 갖는다. 각각 1 Byte를 가리키면, 총 1MB에 접근, 제어할 수 있다.
2-3) 이를 위해 16bit Register를 2개 사용하고, Segment:Offset 방식을 사용한다. Segment 부분 참조.
3) 세그먼트의 크기는 항상 64KiB이다. 16Byte

3. 보호 모드(Protected Mode)
1) 시스템 소프트웨어가 몇 개의 서술자 테이블(Global Descriptor Table)을 설정하고
제어 레지스터 0 (CR0)에서 프로텍션 이네이블(PE:Protection Enable) 비트를 설정한 뒤에 진입할 수 있다

2) 세그먼테이션과 페이징을 모두 지원
3) Segment Register의 명칭도 Segment Descriptor를 선택하는 의미에서 Segment Selecor로 변경
4) Segment Descriptor에는 Segment의 시작 어드레스와 크기, 권한(Privilege), 타입 등의 정보가 있다.
	a) DPL(Descriptor Privilege Level)은 해당 Segment에 접근하기 위한 최소환의 권한을 나타내며 0-3의 숫자를 가진다. (작을수록 권한이 높다)
	b) GDT는 연속된 Descriptor의 집합. 최대 8192개의 Descriptor를 포함.
세그먼트란



데이터 세그먼트는